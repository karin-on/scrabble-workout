{"version":3,"sources":["components/Home/Home.scss","components/Game/Letters/Letters.scss","components/Result/ResultMessage/ResultMessage.scss","components/Result/OtherWords/OtherWords.scss","components/Game/Slots/Slots.scss","components/Game/Submit/Submit.scss","components/Result/Answer/Answer.scss","components/Header/Header.scss","components/Result/PlayAgain/PlayAgain.scss","components/Game/Game.scss","components/Game/Backspace/Backspace.scss","components/Result/Result.scss","index.scss","components/Header/Header.js","components/Home/Home.js","data/data.js","constants/constants.js","components/Game/Slots/Slots.js","components/Game/Backspace/Backspace.js","components/Game/Letters/Letters.js","components/Game/Submit/Submit.js","helpers/shuffle-array.js","helpers/generate-id.js","service/get-words.js","helpers/random-index.js","store/actions/answer.js","components/Game/Game.js","store/actions/init-words.js","components/Result/Answer/Answer.js","components/Result/ResultMessage/ResultMessage.js","components/Result/OtherWords/OtherWords.js","components/Result/PlayAgain/PlayAgain.js","components/Result/Result.js","serviceWorker.js","store/reducers/words.js","index.js","store/reducers/answer.js","App.js"],"names":["module","exports","Header","className","classes","HeaderLink","to","Home","Hero","StartGame","StartGameAction","words","WORD_LENGTH","WORDS_COUNT","length","Slots","lettersInSlots","SlotsSection","Array","keys","map","i","letter","index","key","Slot","value","Backspace","clicked","disabled","onClick","BackspaceBtn","type","defaultProps","Letters","letters","lettersNodes","classNames","Letter","id","LetterButton","active","LettersContainer","Submit","onSubmit","onCancel","Button","shuffleArray","arr","tempValue","randomIndex","newArr","currIndex","Math","floor","random","generateID","toString","substr","getWords","indexCount","submitAnswer","answer","GameView","state","isSubmitVisible","initLetters","lettersObjects","split","setState","toggleLettersActiveState","findIndex","el","handleLetterClick","letterSelected","find","updatedLettersInSlots","handleBackspaceClick","lastLetterID","pop","props","dispatch","history","joinLetters","replace","reduce","a","b","this","prevProps","Game","Component","connect","Answer","AnswerSection","AnswerHeader","ResultMessage","isAnswerCorrect","MessageSection","MessageHeader","MessageIcon","OtherWords","otherWords","otherWordsItems","word","WordListItem","toUpperCase","singularOrPluralForm","OtherSection","OtherHeader","WordList","PlayAgain","PlayAgainSection","PlayAgainBtn","ResultView","includes","filter","Result","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb86fe18.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home__Home__hMHTH\",\"Hero\":\"Home__Hero__1qk5I\",\"Header\":\"Home__Header__2z1F-\",\"StartGame\":\"Home__StartGame__39d5A\",\"StartGameAction\":\"Home__StartGameAction__3rSNF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Letters\":\"Letters__Letters__2F_th\",\"LettersContainer\":\"Letters__LettersContainer__R5vr9\",\"Letter\":\"Letters__Letter__NSURe\",\"Letter-1\":\"Letters__Letter-1__siMGe\",\"Letter-2\":\"Letters__Letter-2__HTGPh\",\"Letter-3\":\"Letters__Letter-3__2pGrL\",\"Letter-4\":\"Letters__Letter-4__3bvc3\",\"Letter-5\":\"Letters__Letter-5__388r_\",\"Letter-6\":\"Letters__Letter-6__3ql2C\",\"Letter-7\":\"Letters__Letter-7__3NXan\",\"LetterButton\":\"Letters__LetterButton__1tsyt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageSection\":\"ResultMessage__MessageSection__1Aq-D\",\"MessageIcon\":\"ResultMessage__MessageIcon__2MrXu\",\"MessageHeader\":\"ResultMessage__MessageHeader__1R9wU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OtherSection\":\"OtherWords__OtherSection__32KdO\",\"OtherHeader\":\"OtherWords__OtherHeader__1VlGe\",\"WordList\":\"OtherWords__WordList__1RqyB\",\"WordListItem\":\"OtherWords__WordListItem__qaidZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SlotsSection\":\"Slots__SlotsSection__3yFud\",\"Slots\":\"Slots__Slots__37-My\",\"Slot\":\"Slots__Slot__2KBwb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Submit\":\"Submit__Submit__2tvrk\",\"Button\":\"Submit__Button__3zAbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerSection\":\"Answer__AnswerSection__w0wsp\",\"AnswerHeader\":\"Answer__AnswerHeader__1Lf6s\",\"Answer\":\"Answer__Answer__1hAC1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header__Header__1_1R8\",\"HeaderLink\":\"Header__HeaderLink__ClY9q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlayAgainSection\":\"PlayAgain__PlayAgainSection__2e0KN\",\"PlayAgainBtn\":\"PlayAgain__PlayAgainBtn__1zcw0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game__Game__xvUCX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackspaceBtn\":\"Backspace__BackspaceBtn__3fj68\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result__Result__3Lmz1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fa-spin\":\"index__fa-spin__2FcI0\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport classes from './Header.scss';\n\nconst Header = () => (\n    <header className={classes.Header}>\n        <Link className={classes.HeaderLink} to=\"/\">Scrabble Workout!</Link>\n    </header>\n);\n\nexport { Header };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport classes from './Home.scss';\n\nconst Home = () => (\n    <main className={classes.Home}>\n        <section className={classes.Hero}>\n            <h2 className={classes.Header}>Home Screen</h2>\n        </section>\n        <section className={classes.StartGame}>\n            <Link to=\"/game\" className={classes.StartGameAction}>\n                Zagraj\n            </Link>\n        </section>\n    </main>\n);\n\nexport { Home };\n","const words = [\n    ['abrazje', 'bajarze'],\n    ['korniki', 'kroniki', 'krionik'],\n    ['bambosz'],\n];\n\nexport { words };\n","import { words } from '../data/data';\n\nconst WORD_LENGTH = 7;\nconst WORDS_COUNT = words.length;\n\nexport { WORD_LENGTH, WORDS_COUNT };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './Slots.scss';\nimport { WORD_LENGTH } from '../../../constants/constants';\n\nconst Slots = ({ lettersInSlots }) => (\n    <section className={classes.SlotsSection}>\n        <ul className={classes.Slots}>\n\n            {[...Array(WORD_LENGTH).keys()]\n                .map((i) => lettersInSlots[i])\n                .map((letter, index) => (\n                    /* eslint-disable react/no-array-index-key */\n                    <li key={index} className={classes.Slot}>\n                        {letter\n                            ? (\n                                <span>\n                                    {letter.value}\n                                </span>\n                            )\n                            : null}\n                    </li>\n                ))}\n\n        </ul>\n    </section>\n);\n\nSlots.propTypes = {\n    lettersInSlots: PropTypes.array.isRequired,\n};\n\nexport { Slots };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Backspace.scss';\n\nconst Backspace = ({ clicked, disabled }) => (\n    <button\n        onClick={clicked}\n        className={classes.BackspaceBtn}\n        disabled={disabled}\n        type=\"button\"\n    >\n        <i className=\"fas fa-backspace fa-2x\" />\n    </button>\n);\n\nBackspace.propTypes = {\n    clicked: PropTypes.func,\n    disabled: PropTypes.bool.isRequired,\n};\n\nBackspace.defaultProps = {\n    clicked: () => {},\n};\n\nexport { Backspace };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport classes from './Letters.scss';\n\nconst Letters = ({ letters, clicked }) => {\n    const lettersNodes = letters\n        .map((letter, i) => (\n            <li\n                className={classNames(\n                    classes.Letter,\n                    classes[`Letter-${i + 1}`],\n                )}\n                key={letter.id}\n            >\n                <button\n                    type=\"button\"\n                    className={classes.LetterButton}\n                    disabled={!letter.active}\n                    onClick={() => clicked(letter.id)}\n                >\n                    {letter.value}\n                </button>\n            </li>\n        ));\n\n    return (\n        <section className={classes.Letters}>\n            <ul className={classes.LettersContainer}>\n                {lettersNodes}\n            </ul>\n        </section>\n    );\n};\n\nLetters.propTypes = {\n    letters: PropTypes.array.isRequired,\n    clicked: PropTypes.func,\n};\n\nLetters.defaultProps = {\n    clicked: () => {},\n};\n\nexport { Letters };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './Submit.scss';\n\nconst Submit = ({ onSubmit, onCancel }) => (\n    <section className={classes.Submit}>\n        <button\n            className={classes.Button}\n            onClick={onSubmit}\n            type=\"button\"\n        >\n            Sprawdź\n        </button>\n        <button\n            className={classes.Button}\n            onClick={onCancel}\n            type=\"button\"\n        >\n            Anuluj\n        </button>\n    </section>\n);\n\nSubmit.propTypes = {\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n};\n\nSubmit.defaultProps = {\n    onSubmit: () => {},\n    onCancel: () => {},\n};\n\nexport { Submit };\n","const shuffleArray = (arr) => {\n    const newArr = arr;\n    let currIndex = arr.length;\n    let tempValue;\n    let randomIndex;\n\n    while (currIndex) {\n        randomIndex = Math.floor(Math.random() * currIndex);\n        currIndex -= 1;\n\n        tempValue = newArr[currIndex];\n        newArr[currIndex] = newArr[randomIndex];\n        newArr[randomIndex] = tempValue;\n    }\n\n    return newArr;\n};\n\nexport { shuffleArray };\n","const generateID = () => `_${Math.random().toString(36).substr(2)}`;\n\nexport { generateID };\n","import { WORDS_COUNT } from '../constants/constants';\nimport { getRandomIndexInRange } from '../helpers';\nimport { words } from '../data/data';\n\nconst getWords = () => {\n    const index = getRandomIndexInRange(WORDS_COUNT);\n    return [...words[index]];\n};\n\nexport { getWords };\n","const getRandomIndexInRange = (indexCount) => (\n    Math.floor(Math.random() * indexCount)\n);\n\nexport { getRandomIndexInRange };\n","export const SUBMIT_ANSWER = 'SUBMIT_ANSWER';\n\nexport const submitAnswer = (answer) => ({\n    type: SUBMIT_ANSWER,\n    answer,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport classes from './Game.scss';\nimport { Slots } from './Slots/Slots';\nimport { Backspace } from './Backspace/Backspace';\nimport { Letters } from './Letters/Letters';\nimport { Submit } from './Submit/Submit';\n\nimport { WORD_LENGTH } from '../../constants/constants';\nimport { shuffleArray, generateID } from '../../helpers';\nimport { initWords } from '../../store/actions/init-words';\nimport { submitAnswer } from '../../store/actions/answer';\n\nclass GameView extends Component {\n    state = {\n        letters: [],\n        lettersInSlots: [],\n        isSubmitVisible: false,\n    };\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch(initWords());\n    }\n\n    componentDidUpdate(prevProps) {\n        const { words } = this.props;\n        if (words !== prevProps.words) {\n            this.initLetters(words);\n        }\n    }\n\n    initLetters = (words) => {\n        const lettersObjects = words[0].split('')\n            .map((letter) => ({\n                value: letter,\n                id: generateID(),\n                active: true,\n            }));\n        /* eslint-disable react/no-did-update-set-state */\n        this.setState({\n            letters: shuffleArray(lettersObjects),\n        });\n    };\n\n    toggleLettersActiveState = (id) => {\n        const { letters } = this.state;\n\n        const index = letters.findIndex((el) => el.id === id);\n        letters[index].active = !letters[index].active;\n        this.setState({\n            letters,\n        });\n    };\n\n    handleLetterClick = (id) => {\n        const { letters, lettersInSlots } = this.state;\n        const letterSelected = letters\n            .find((el) => el.id === id);\n\n        this.toggleLettersActiveState(id);\n        const updatedLettersInSlots = [...lettersInSlots, letterSelected];\n\n        this.setState({\n            lettersInSlots: updatedLettersInSlots,\n        }, () => {\n            if (updatedLettersInSlots.length === WORD_LENGTH) {\n                this.setState({\n                    isSubmitVisible: true,\n                });\n            }\n        });\n    };\n\n    handleBackspaceClick = () => {\n        const { lettersInSlots } = this.state;\n        const lastLetterID = lettersInSlots[lettersInSlots.length - 1].id;\n\n        this.toggleLettersActiveState(lastLetterID);\n        lettersInSlots.pop();\n\n        this.setState({\n            lettersInSlots,\n        });\n    };\n\n    onSubmit = () => {\n        const { lettersInSlots } = this.state;\n        const { dispatch, history } = this.props;\n        dispatch(submitAnswer(this.joinLetters(lettersInSlots)));\n        history.replace('/result');\n    };\n\n    onCancel = () => {\n        this.setState({\n            isSubmitVisible: false,\n        });\n    };\n\n    joinLetters = (arr) => arr.reduce((a, b) => a + b.value, '');\n\n    render() {\n        const { letters, lettersInSlots, isSubmitVisible } = this.state;\n\n        return (\n            <main className={classes.Game}>\n                <Slots\n                    lettersInSlots={lettersInSlots}\n                />\n                <Backspace\n                    clicked={this.handleBackspaceClick}\n                    disabled={lettersInSlots.length === 0 || isSubmitVisible}\n                />\n                {\n                    !isSubmitVisible\n                        ? (\n                            <Letters\n                                letters={letters}\n                                clicked={this.handleLetterClick}\n                            />\n                        )\n                        : (\n                            <Submit\n                                onSubmit={this.onSubmit}\n                                onCancel={this.onCancel}\n                            />\n                        )\n                }\n            </main>\n        );\n    }\n}\n\nGameView.propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    words: PropTypes.array.isRequired,\n    history: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = ({ words }) => ({ words });\n\nconst Game = connect(mapStateToProps)(GameView);\nexport { Game };\n","import { getWords } from '../../service/get-words';\n\nexport const INIT_WORDS = 'INIT_WORDS';\n\nexport const initWords = () => ({\n    type: INIT_WORDS,\n    words: getWords(),\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Answer.scss';\n\nconst Answer = ({ answer }) => (\n    <div className={classes.AnswerSection}>\n        <h2 className={classes.AnswerHeader}>Twoje słowo:</h2>\n        <div className={classes.Answer}>\n            {answer}\n        </div>\n    </div>\n);\n\nAnswer.propTypes = {\n    answer: PropTypes.string.isRequired,\n};\n\nexport { Answer };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport classes from './ResultMessage.scss';\n\nconst ResultMessage = ({ isAnswerCorrect }) => (\n    <div className={classes.MessageSection}>\n        {\n            isAnswerCorrect\n                ? (\n                    <h2 className={classes.MessageHeader}>\n                        <i className={classNames('fas fa-check fa-3x', classes.MessageIcon)} />\n                        Gratulacje, jest to poprawna odpowiedź!\n                    </h2>\n                )\n                : (\n                    <h2 className={classes.MessageHeader}>\n                        <i className={classNames('fas fa-times fa-3x', classes.MessageIcon)} />\n                        Nie udało się, może następnym razem.\n                    </h2>\n                )\n        }\n    </div>\n);\n\nResultMessage.propTypes = {\n    isAnswerCorrect: PropTypes.bool.isRequired,\n};\n\nexport { ResultMessage };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './OtherWords.scss';\n\nconst OtherWords = ({ isAnswerCorrect, otherWords }) => {\n    const otherWordsItems = otherWords\n        .map((word) => (\n            <li className={classes.WordListItem} key={word}>\n                {word.toUpperCase()}\n            </li>\n        ));\n\n    const singularOrPluralForm = otherWords.length > 1 ? 'słowa' : 'słowo';\n\n    return (\n        <div className={classes.OtherSection}>\n            {\n                !otherWords.length\n                    ? <h2 className={classes.OtherHeader}>Słowo nie ma anagramów</h2>\n                    : (\n                        <>\n                            <h2 className={classes.OtherHeader}>\n                                {isAnswerCorrect\n                                    ? `Inne możliwe ${singularOrPluralForm}:`\n                                    : `Poprawne ${singularOrPluralForm} to:`}\n                            </h2>\n                            <ul className={classes.WordList}>\n                                {otherWordsItems}\n                            </ul>\n                        </>\n                    )\n            }\n        </div>\n    );\n};\n\nOtherWords.propTypes = {\n    isAnswerCorrect: PropTypes.bool.isRequired,\n    otherWords: PropTypes.array.isRequired,\n};\n\nexport { OtherWords };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classes from './PlayAgain.scss';\n\nconst PlayAgain = () => (\n    <div className={classes.PlayAgainSection}>\n        <Link\n            to=\"/game\"\n            replace\n            className={classes.PlayAgainBtn}\n            type=\"button\"\n        >\n            Zagraj ponownie\n        </Link>\n    </div>\n);\n\nexport { PlayAgain };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport classes from './Result.scss';\nimport { submitAnswer } from '../../store/actions/answer';\nimport { Answer } from './Answer/Answer';\nimport { ResultMessage } from './ResultMessage/ResultMessage';\nimport { OtherWords } from './OtherWords/OtherWords';\nimport { PlayAgain } from './PlayAgain/PlayAgain';\n\nclass ResultView extends Component {\n    componentWillUnmount() {\n        const { dispatch } = this.props;\n        dispatch(submitAnswer(''));\n    }\n\n    isAnswerCorrect = () => {\n        const { words, answer } = this.props;\n        return words.includes(answer);\n    };\n\n    render() {\n        const { words, answer } = this.props;\n        const otherWords = words.filter((word) => word !== answer);\n\n        if (!answer) {\n            return <Redirect to=\"/\" />;\n        }\n\n        return (\n            <main className={classes.Result}>\n\n                <Answer answer={answer.toUpperCase()} />\n                <ResultMessage isAnswerCorrect={this.isAnswerCorrect()} />\n                <OtherWords\n                    isAnswerCorrect={this.isAnswerCorrect()}\n                    otherWords={otherWords}\n                />\n                <PlayAgain />\n            </main>\n        );\n    }\n}\n\nResultView.propTypes = {\n    words: PropTypes.array.isRequired,\n    answer: PropTypes.string.isRequired,\n    dispatch: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = ({ words, answer }) => ({ words, answer });\n\nconst Result = connect(mapStateToProps)(ResultView);\nexport { Result };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { INIT_WORDS } from '../actions/init-words';\n\nconst initialState = [];\n\nconst wordsReducer = (state = initialState, { type, words }) => {\n    switch (type) {\n        case INIT_WORDS:\n            return words;\n        default: return state;\n    }\n};\n\nexport { wordsReducer };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers } from 'redux';\nimport 'normalize-css/normalize.css';\nimport '@fortawesome/fontawesome-free/scss/fontawesome.scss';\nimport '@fortawesome/fontawesome-free/scss/solid.scss';\n\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { wordsReducer } from './store/reducers/words';\nimport { answerReducer } from './store/reducers/answer';\n\nconst rootReducer = combineReducers({\n    words: wordsReducer,\n    answer: answerReducer,\n});\n\nconst store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { SUBMIT_ANSWER } from '../actions/answer';\n\nconst initialState = '';\n\nconst answerReducer = (state = initialState, { type, answer }) => {\n    switch (type) {\n        case SUBMIT_ANSWER:\n            return answer;\n        default: return state;\n    }\n};\n\nexport { answerReducer };\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport { Header } from './components/Header/Header';\nimport { Home } from './components/Home/Home';\nimport { Game } from './components/Game/Game';\nimport { Result } from './components/Result/Result';\n\nconst App = () => (\n    <BrowserRouter basename=\"/scrabble-workout\">\n        <div>\n            <Header />\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/game\" component={Game} />\n            <Route exact path=\"/result\" component={Result} />\n        </div>\n    </BrowserRouter>\n);\n\nexport { App };\n"],"sourceRoot":""}