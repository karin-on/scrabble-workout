{"version":3,"sources":["components/Home/Home.scss","components/Game/Letters/Letters.scss","components/Game/Slots/Slots.scss","components/Header/Header.scss","components/Game/Game.scss","components/Header/Header.js","components/Home/Home.js","data/data.js","constants/constants.js","components/Game/Slots/Slots.js","components/Game/Letters/Letters.js","components/Game/Result/Result.js","helpers/shuffle-array.js","helpers/generate-id.js","service/service.js","helpers/random-index.js","components/Game/Game.js","store/actions/init-game.js","serviceWorker.js","store/reducers/init-game.js","index.js","App.js"],"names":["module","exports","Header","className","classes","HeaderLink","to","Home","Hero","StartGame","StartGameAction","words","WORD_LENGTH","WORDS_COUNT","length","Slots","lettersInSlots","clicked","SlotsSection","Array","keys","map","i","letter","index","key","Slot","onClick","id","value","defaultProps","Letters","letters","lettersNodes","classNames","Letter","type","LetterButton","disabled","active","LettersContainer","Result","connect","correctWords","gameWon","word","toUpperCase","join","shuffleArray","arr","tempValue","randomIndex","newArr","currIndex","Math","floor","random","generateID","toString","substr","getCorrectWords","indexCount","GameView","state","undefined","initLetters","lettersObjects","split","setState","toggleLettersActiveState","findIndex","el","handleLetterClick","letterSelected","find","updatedLettersInSlots","checkResult","handleSlotClick","pop","joinLetters","reduce","a","b","props","result","includes","dispatch","this","prevProps","Game","Component","Boolean","window","location","hostname","match","initialState","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8c4355f3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home__Home__hMHTH\",\"Hero\":\"Home__Hero__1qk5I\",\"Header\":\"Home__Header__2z1F-\",\"StartGame\":\"Home__StartGame__39d5A\",\"StartGameAction\":\"Home__StartGameAction__3rSNF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Letters\":\"Letters__Letters__2F_th\",\"LettersContainer\":\"Letters__LettersContainer__R5vr9\",\"Letter\":\"Letters__Letter__NSURe\",\"Letter-1\":\"Letters__Letter-1__siMGe\",\"Letter-2\":\"Letters__Letter-2__HTGPh\",\"Letter-3\":\"Letters__Letter-3__2pGrL\",\"Letter-4\":\"Letters__Letter-4__3bvc3\",\"Letter-5\":\"Letters__Letter-5__388r_\",\"Letter-6\":\"Letters__Letter-6__3ql2C\",\"Letter-7\":\"Letters__Letter-7__3NXan\",\"LetterButton\":\"Letters__LetterButton__1tsyt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SlotsSection\":\"Slots__SlotsSection__3yFud\",\"Slots\":\"Slots__Slots__37-My\",\"Slot\":\"Slots__Slot__2KBwb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header__Header__1_1R8\",\"HeaderLink\":\"Header__HeaderLink__ClY9q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game__Game__xvUCX\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport classes from './Header.scss';\n\nconst Header = () => (\n    <header className={classes.Header}>\n        <Link className={classes.HeaderLink} to=\"/\">Scrabble Workout!</Link>\n    </header>\n);\n\nexport { Header };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport classes from './Home.scss';\n\nconst Home = () => (\n    <main className={classes.Home}>\n        <section className={classes.Hero}>\n            <h2 className={classes.Header}>Home Screen</h2>\n        </section>\n        <section className={classes.StartGame}>\n            <Link to=\"/game\" className={classes.StartGameAction}>\n                Zagraj\n            </Link>\n        </section>\n    </main>\n);\n\nexport { Home };\n","const words = [\n    ['abrazje', 'bajarze'],\n    ['korniki', 'kroniki', 'krionik'],\n    ['bambosz'],\n];\n\nexport { words };\n","import { words } from '../data/data';\n\nconst WORD_LENGTH = 7;\nconst WORDS_COUNT = words.length;\n\nexport { WORD_LENGTH, WORDS_COUNT };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './Slots.scss';\n\nimport { WORD_LENGTH } from '../../../constants/constants';\n\n\nconst Slots = ({ lettersInSlots, clicked }) => (\n    <section className={classes.SlotsSection}>\n        <ul className={classes.Slots}>\n\n            {[...Array(WORD_LENGTH).keys()]\n                .map((i) => lettersInSlots[i])\n                .map((letter, index) => (\n                    /* eslint-disable react/no-array-index-key */\n                    <li key={index} className={classes.Slot}>\n                        {letter\n                            ? (\n                                <span onClick={() => clicked(letter.id, index)}>\n                                    {letter.value}\n                                </span>\n                            )\n                            : null}\n                    </li>\n                ))}\n\n        </ul>\n    </section>\n);\n\nSlots.propTypes = {\n    lettersInSlots: PropTypes.array.isRequired,\n    clicked: PropTypes.func,\n};\n\nSlots.defaultProps = {\n    clicked: () => {},\n};\n\nexport { Slots };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport classes from './Letters.scss';\n\nconst Letters = ({ letters, clicked }) => {\n    const lettersNodes = letters\n        .map((letter, i) => (\n            <li\n                className={classNames(\n                    classes.Letter,\n                    classes[`Letter-${i + 1}`],\n                )}\n                key={letter.id}\n            >\n                <button\n                    type=\"button\"\n                    className={classes.LetterButton}\n                    disabled={!letter.active}\n                    onClick={() => clicked(letter.id)}\n                >\n                    {letter.value}\n                </button>\n            </li>\n        ));\n\n    return (\n        <section className={classes.Letters}>\n            <ul className={classes.LettersContainer}>\n                {lettersNodes}\n            </ul>\n        </section>\n    );\n};\n\nLetters.propTypes = {\n    letters: PropTypes.array.isRequired,\n    clicked: PropTypes.func,\n};\n\nLetters.defaultProps = {\n    clicked: () => {},\n};\n\nexport { Letters };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nconst ResultView = ({ gameWon, correctWords }) => (\n    <div>\n        {\n            (gameWon)\n                ? 'gratulacje, wygrałeś'\n                : (\n                    `nie udało się, może następnym razem.\n                    poprawne słowa to:\n                    ${correctWords.map((word) => word.toUpperCase()).join(', ')}`\n                )\n        }\n    </div>\n);\n\nResultView.propTypes = {\n    gameWon: PropTypes.bool.isRequired,\n    correctWords: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = ({ correctWords }) => ({ correctWords });\n\nconst Result = connect(mapStateToProps)(ResultView);\nexport { Result };\n","const shuffleArray = (arr) => {\n    const newArr = arr;\n    let currIndex = arr.length;\n    let tempValue;\n    let randomIndex;\n\n    while (currIndex) {\n        randomIndex = Math.floor(Math.random() * currIndex);\n        currIndex -= 1;\n\n        tempValue = newArr[currIndex];\n        newArr[currIndex] = newArr[randomIndex];\n        newArr[randomIndex] = tempValue;\n    }\n\n    return newArr;\n};\n\nexport { shuffleArray };\n","const generateID = () => `_${Math.random().toString(36).substr(2)}`;\n\nexport { generateID };\n","import { WORDS_COUNT } from '../constants/constants';\nimport { getRandomIndexInRange } from '../helpers';\nimport { words } from '../data/data';\n\n\nconst getCorrectWords = () => {\n    const index = getRandomIndexInRange(WORDS_COUNT);\n    return [...words[index]];\n};\n\nexport { getCorrectWords };\n","const getRandomIndexInRange = (indexCount) => (\n    Math.floor(Math.random() * indexCount)\n);\n\nexport { getRandomIndexInRange };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport classes from './Game.scss';\nimport { Slots } from './Slots/Slots';\nimport { Letters } from './Letters/Letters';\nimport { Result } from './Result/Result';\n\nimport { WORD_LENGTH } from '../../constants/constants';\nimport { shuffleArray, generateID } from '../../helpers';\nimport { initGame } from '../../store/actions/init-game';\n\nclass GameView extends Component {\n    state = {\n        letters: [],\n        lettersInSlots: [],\n        gameWon: undefined,\n    };\n\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch(initGame());\n    }\n\n    componentDidUpdate(prevProps) {\n        const { correctWords } = this.props;\n        if (correctWords !== prevProps.correctWords) {\n            this.initLetters(correctWords);\n        }\n    }\n\n    initLetters = (words) => {\n        const lettersObjects = words[0].split('')\n            .map((letter) => ({\n                value: letter,\n                id: generateID(),\n                active: true,\n            }));\n        /* eslint-disable react/no-did-update-set-state */\n        this.setState({\n            letters: shuffleArray(lettersObjects),\n        });\n    };\n\n    toggleLettersActiveState = (id) => {\n        const { letters } = this.state;\n\n        const index = letters.findIndex((el) => el.id === id);\n        letters[index].active = !letters[index].active;\n        this.setState({\n            letters,\n        });\n    };\n\n    handleLetterClick = (id) => {\n        const { letters, lettersInSlots } = this.state;\n        const letterSelected = letters\n            .find((el) => el.id === id);\n\n        this.toggleLettersActiveState(id);\n        const updatedLettersInSlots = [...lettersInSlots, letterSelected];\n\n        this.setState({\n            lettersInSlots: updatedLettersInSlots,\n        }, () => {\n            if (updatedLettersInSlots.length === WORD_LENGTH) {\n                this.checkResult();\n            }\n        });\n    };\n\n    handleSlotClick = (id, i) => {\n        const { lettersInSlots } = this.state;\n\n        if (i !== lettersInSlots.length - 1) {\n            return;\n        }\n\n        this.toggleLettersActiveState(id);\n        lettersInSlots.pop();\n\n        this.setState({\n            lettersInSlots,\n        });\n    };\n\n    joinLetters = (arr) => arr.reduce((a, b) => a + b.value, '');\n\n    checkResult = () => {\n        const { correctWords } = this.props;\n        const { lettersInSlots } = this.state;\n        const result = this.joinLetters(lettersInSlots);\n\n        this.setState({\n            gameWon: correctWords.includes(result),\n        });\n    };\n\n    render() {\n        const { letters, lettersInSlots, gameWon } = this.state;\n\n        return (\n            <main className={classes.Game}>\n                <Slots\n                    lettersInSlots={lettersInSlots}\n                    clicked={this.handleSlotClick}\n                />\n                {\n                    gameWon === undefined\n                        ? (\n                            <Letters\n                                letters={letters}\n                                clicked={this.handleLetterClick}\n                            />\n                        )\n                        : <Result gameWon={gameWon} />\n                }\n            </main>\n        );\n    }\n}\n\nGameView.propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    correctWords: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = ({ correctWords }) => ({ correctWords });\n\nconst Game = connect(mapStateToProps)(GameView);\nexport { Game };\n","import { getCorrectWords } from '../../service/service';\n\nexport const INIT_GAME = 'INIT_GAME';\n\nexport const initGame = () => ({\n    type: INIT_GAME,\n    correctWords: getCorrectWords(),\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { INIT_GAME } from '../actions/init-game';\n\nconst initialState = {\n    correctWords: [],\n};\n\nconst reducer = (state = initialState, { type, correctWords }) => {\n    switch (type) {\n        case INIT_GAME:\n            return {\n                ...state,\n                correctWords,\n            };\n        default: return state;\n    }\n};\n\nexport { reducer };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport 'normalize-css/normalize.css';\n\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { reducer } from './store/reducers/init-game';\n\nconst store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nimport { Header } from './components/Header/Header';\nimport { Home } from './components/Home/Home';\nimport { Game } from './components/Game/Game';\n\nconst App = () => (\n    <BrowserRouter basename=\"/scrabble-workout\">\n        <div>\n            <Header />\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/game\" component={Game} />\n        </div>\n    </BrowserRouter>\n);\n\nexport { App };\n"],"sourceRoot":""}