{"version":3,"sources":["components/Header/Header.js","components/Home/Home.js","config/config.js","components/Game/Slots/Slots.js","components/Game/Backspace/Backspace.js","components/Game/Letters/Letter/Letter.js","components/Game/Letters/Letters.js","components/Game/Submit/Submit.js","helpers/shuffle-array.js","helpers/generate-id.js","helpers/is-screen-small.js","components/Game/Timer/Timer.js","helpers/format-duration.js","store/actions/init-words.js","helpers/random-index.js","store/actions/submit-answer.js","components/Game/Game.js","components/Result/Answer/Answer.js","components/Result/ResultMessage/ResultMessage.js","components/Result/OtherWords/OtherWords.js","components/Result/PlayAgain/PlayAgain.js","components/Result/Result.js","service/http-service.js","service/get-all-words.js","App.js","store/actions/load-all-words.js","serviceWorker.js","store/reducers/words.js","store/reducers/all-words.js","index.js","store/reducers/answer.js","components/Game/Game.scss","components/Game/Slots/Slots.scss","components/Result/ResultMessage/ResultMessage.scss","components/Result/OtherWords/OtherWords.scss","components/Home/Home.scss","components/Game/Letters/Letters.scss","components/Game/Letters/Letter/Letter.scss","components/Game/Submit/Submit.scss","components/Result/Answer/Answer.scss","components/Header/Header.scss","components/Result/PlayAgain/PlayAgain.scss","components/Game/Backspace/Backspace.scss","components/Game/Timer/Timer.scss","components/Result/Result.scss","index.scss"],"names":["Header","className","classes","HeaderLink","to","Home","Hero","StartGame","StartGameAction","WORD_LENGTH","DURATION","INTERVAL","window","matchMedia","matches","addEventListener","removeEventListener","SMALL_SCREEN","Slots","currentAnswer","SlotsSection","Array","keys","map","i","letter","index","key","classNames","Slot","Empty","SlotLetter","value","Backspace","clicked","disabled","onClick","BackspaceBtn","type","defaultProps","Letter","dragActive","draggableId","id","isDragDisabled","disableInteractiveElementBlocking","provided","draggableProps","dragHandleProps","ref","innerRef","tabIndex","LetterButton","active","Letters","letters","dragEnd","onDragEnd","droppableId","direction","snapshot","LettersContainer","DraggingOver","isDraggingOver","droppableProps","placeholder","Submit","onSubmit","onCancel","showCancel","Button","shuffleArray","arr","tempValue","randomIndex","newArr","currIndex","length","Math","floor","random","generateID","toString","substr","isScreenSmall","Timer","state","timeLeft","startTimer","setState","start","Date","getTime","updateTimeLeft","interval","setInterval","timeIsOver","props","getTimeLeft","stopTimer","clearInterval","this","duration","Number","isInteger","Error","minutes","seconds","padStart","formatDuration","Component","initWords","allWords","indexCount","wordsCount","words","submitAnswer","answer","GameView","getDragActive","handleResize","dragActiveOnResizeEnd","newState","lettersOutsideSlots","filter","currentAnswerOnDesktop","concat","setAllLettersActiveState","isSubmitVisible","initLetters","lettersObjects","split","initCurrentAnswer","toggleLettersActiveState","findIndex","el","isActive","updatedLetters","forEach","handleLetterClick","letterSelected","find","updatedCurrentAnswer","handleDragEnd","result","source","destination","movedLetter","splice","handleBackspaceClick","lastLetterID","pop","submit","dispatch","history","joinLetters","replace","reduce","a","b","bind","debouncedResizeListener","debounce","prevProps","loading","error","gameClasses","Game","Loader","connect","data","Answer","AnswerSection","AnswerHeader","ResultMessage","isAnswerCorrect","MessageSection","MessageHeader","MessageIcon","OtherWords","otherWords","otherWordsItems","word","WordListItem","toUpperCase","singularOrPluralForm","OtherSection","OtherHeader","WordList","PlayAgain","PlayAgainSection","PlayAgainBtn","ResultView","includes","Result","httpService","url","axios","get","then","res","urls","WordsService","AppView","loadSuccess","loadFailure","basename","process","exact","path","component","App","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.d0316e0c.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport classes from './Header.scss';\n\nconst Header = () => (\n    <header>\n        <h1 className={classes.Header}>\n            <Link className={classes.HeaderLink} to=\"/\">Scrabble Workout!</Link>\n        </h1>\n    </header>\n);\n\nexport { Header };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport classes from './Home.scss';\n\nconst Home = () => (\n    <main className={classes.Home}>\n        <section className={classes.Hero}>\n            <h2>Home Screen</h2>\n        </section>\n        <section className={classes.StartGame}>\n            <Link to=\"/game\" className={classes.StartGameAction}>\n                Zagraj\n            </Link>\n        </section>\n    </main>\n);\n\nexport { Home };\n","export const WORD_LENGTH = 7;\nexport const DURATION = 120000;\nexport const INTERVAL = 1000;\n\n/* a piece of magic due to the fact that matchMedia isn't implemented in JSDOM (used by Jest) yet */\nwindow.matchMedia = window.matchMedia || (() => (\n    {\n        matches: false,\n        addEventListener: () => {},\n        removeEventListener: () => {},\n    })\n);\n\nexport const SMALL_SCREEN = window.matchMedia('(max-width: 530px)');\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport classes from './Slots.scss';\nimport { WORD_LENGTH } from '../../../config/config';\n\nconst Slots = ({ currentAnswer }) => (\n    <section className={classes.SlotsSection}>\n        <ul className={classes.Slots}>\n\n            {[...Array(WORD_LENGTH).keys()]\n                .map((i) => currentAnswer[i])\n                .map((letter, index) => (\n                    /* eslint-disable react/no-array-index-key */\n                    <li\n                        key={index}\n                        className={classNames(\n                            classes.Slot,\n                            { [classes.Empty]: !letter },\n                        )}\n                    >\n                        {letter\n                            ? (\n                                <span className={classes.SlotLetter}>\n                                    {letter.value}\n                                </span>\n                            )\n                            : null}\n                    </li>\n                ))}\n\n        </ul>\n    </section>\n);\n\nSlots.propTypes = {\n    currentAnswer: PropTypes.array.isRequired,\n};\n\nexport { Slots };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Backspace.scss';\n\nconst Backspace = ({ clicked, disabled }) => (\n    <button\n        onClick={clicked}\n        className={classes.BackspaceBtn}\n        disabled={disabled}\n        type=\"button\"\n    >\n        <i className=\"fas fa-backspace fa-2x\" />\n    </button>\n);\n\nBackspace.propTypes = {\n    clicked: PropTypes.func,\n    disabled: PropTypes.bool.isRequired,\n};\n\nBackspace.defaultProps = {\n    clicked: () => {},\n};\n\nexport { Backspace };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Draggable } from 'react-beautiful-dnd';\nimport classNames from 'classnames';\n\nimport classes from './Letter.scss';\n\nconst Letter = ({ dragActive, clicked, letter, index }) => (\n    <Draggable\n        draggableId={letter.id}\n        isDragDisabled={!dragActive}\n        disableInteractiveElementBlocking\n        index={index}\n        key={letter.id}\n    >\n        {(provided) => (\n            <li\n                /*eslint-disable react/jsx-props-no-spreading*/\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                ref={provided.innerRef}\n                className={classNames(\n                    classes.Letter,\n                    classes[`Letter-${index + 1}`],\n                )}\n            >\n                <button\n                    type=\"button\"\n                    tabIndex=\"-1\"\n                    className={classes.LetterButton}\n                    disabled={!letter.active}\n                    onClick={() => clicked(letter.id)}\n                >\n                    {letter.value}\n                </button>\n            </li>\n        )}\n    </Draggable>\n);\n\nLetter.propTypes = {\n    dragActive: PropTypes.bool.isRequired,\n    clicked: PropTypes.func,\n    letter: PropTypes.object.isRequired,\n    index: PropTypes.number.isRequired,\n};\n\nLetter.defaultProps = {\n    clicked: () => {},\n};\n\nexport { Letter };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport classNames from 'classnames';\n\nimport classes from './Letters.scss';\nimport { Letter } from './Letter/Letter';\n\nconst Letters = ({ letters, clicked, dragActive, dragEnd }) => (\n    <DragDropContext onDragEnd={dragEnd}>\n        <section className={classes.Letters}>\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\n                {(provided, snapshot) => (\n                    <ul\n                        className={classNames(\n                            classes.LettersContainer,\n                            { [classes.DraggingOver]: snapshot.isDraggingOver },\n                        )}\n                        ref={provided.innerRef}\n                        /*eslint-disable react/jsx-props-no-spreading*/\n                        {...provided.droppableProps}\n                    >\n                        {\n                            letters.map((letter, i) => (\n                                <Letter\n                                    /*eslint-disable react/jsx-props-no-spreading*/\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                    dragActive={dragActive}\n                                    clicked={clicked}\n                                    letter={letter}\n                                    index={i}\n                                    key={letter.id}\n                                />\n                            ))\n                        }\n                        {provided.placeholder}\n                    </ul>\n                )}\n            </Droppable>\n        </section>\n    </DragDropContext>\n);\n\nLetters.propTypes = {\n    letters: PropTypes.array.isRequired,\n    clicked: PropTypes.func,\n    dragActive: PropTypes.bool.isRequired,\n    dragEnd: PropTypes.func,\n};\n\nLetters.defaultProps = {\n    dragEnd: () => {},\n    clicked: () => {},\n};\n\nexport { Letters };\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './Submit.scss';\n\nconst Submit = ({ onSubmit, onCancel, showCancel }) => (\n    <section className={classes.Submit}>\n        <button\n            className={classes.Button}\n            onClick={onSubmit}\n            type=\"button\"\n        >\n            Sprawdź\n        </button>\n        {\n            showCancel\n                ? (\n                    <button\n                        className={classes.Button}\n                        onClick={onCancel}\n                        type=\"button\"\n                    >\n                        Anuluj\n                    </button>\n                )\n                : null\n        }\n    </section>\n);\n\nSubmit.propTypes = {\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n    showCancel: PropTypes.bool.isRequired,\n};\n\nSubmit.defaultProps = {\n    onSubmit: () => {},\n    onCancel: () => {},\n};\n\nexport { Submit };\n","const shuffleArray = (arr) => {\n    const newArr = arr;\n    let currIndex = arr.length;\n    let tempValue;\n    let randomIndex;\n\n    while (currIndex) {\n        randomIndex = Math.floor(Math.random() * currIndex);\n        currIndex -= 1;\n\n        tempValue = newArr[currIndex];\n        newArr[currIndex] = newArr[randomIndex];\n        newArr[randomIndex] = tempValue;\n    }\n\n    return newArr;\n};\n\nexport { shuffleArray };\n","const generateID = () => `_${Math.random().toString(36).substr(2)}`;\n\nexport { generateID };\n","import { SMALL_SCREEN } from '../config/config';\n\nconst isScreenSmall = () => SMALL_SCREEN.matches;\n\nexport { isScreenSmall };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport classes from './Timer.scss';\nimport { formatDuration } from '../../../helpers';\nimport { DURATION, INTERVAL } from '../../../config/config';\n\n\nclass Timer extends Component {\n    state = {\n        timeLeft: DURATION,\n    };\n\n    componentDidMount() {\n        this.startTimer();\n    }\n\n    componentWillUnmount() {\n        this.stopTimer();\n    }\n\n    getTimeLeft() {\n        const { start } = this.state;\n        return DURATION - (new Date().getTime() - start);\n    }\n\n    startTimer = () => {\n        this.setState({\n            start: new Date().getTime(),\n        }, () => {\n            this.updateTimeLeft();\n            this.interval = setInterval(this.updateTimeLeft, INTERVAL);\n        });\n    };\n\n    updateTimeLeft = () => {\n        const { timeIsOver } = this.props;\n\n        this.setState({\n            timeLeft: this.getTimeLeft(),\n        }, () => {\n            const { timeLeft } = this.state;\n            if (timeLeft <= 0) {\n                this.stopTimer();\n                timeIsOver();\n            }\n        });\n    };\n\n    stopTimer = () => {\n        clearInterval(this.interval);\n    };\n\n    render() {\n        const { timeLeft } = this.state;\n\n        return (\n            <div className={classes.Timer}>\n                <span>{formatDuration(timeLeft)}</span>\n            </div>\n        );\n    }\n}\n\nTimer.propTypes = {\n    timeIsOver: PropTypes.func.isRequired,\n};\n\nexport { Timer };\n","const formatDuration = (duration) => {\n    if (!Number.isInteger(duration)) {\n        throw new Error('Error in formatDuration function: parameter is not a non-negative integer. Please provide a proper parameter');\n    }\n\n    if (duration < 0) {\n        return undefined;\n    }\n\n    const minutes = Math.floor(duration / (1000 * 60)).toString();\n    const seconds = Math.floor((duration % (1000 * 60)) / 1000).toString().padStart(2, '0');\n    return `${minutes}:${seconds}`;\n};\n\nexport { formatDuration };\n","import { getRandomIndexInRange } from '../../helpers';\n\nexport const INIT_WORDS = 'INIT_WORDS';\n\nexport const initWords = (allWords) => {\n    const wordsCount = allWords.length;\n    const index = getRandomIndexInRange(wordsCount);\n    return {\n        type: INIT_WORDS,\n        words: allWords.length ? [...allWords[index]] : [],\n    };\n};\n","const getRandomIndexInRange = (indexCount) => (\n    Math.floor(Math.random() * indexCount)\n);\n\nexport { getRandomIndexInRange };\n","export const SUBMIT_ANSWER = 'SUBMIT_ANSWER';\n\nexport const submitAnswer = (answer) => ({\n    type: SUBMIT_ANSWER,\n    answer,\n});\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport classNames from 'classnames';\n\nimport classes from './Game.scss';\nimport { Slots } from './Slots/Slots';\nimport { Backspace } from './Backspace/Backspace';\nimport { Letters } from './Letters/Letters';\nimport { Submit } from './Submit/Submit';\nimport { Timer } from './Timer/Timer';\n\nimport { WORD_LENGTH } from '../../config/config';\nimport { shuffleArray, generateID, isScreenSmall } from '../../helpers';\nimport { initWords } from '../../store/actions/init-words';\nimport { submitAnswer } from '../../store/actions/submit-answer';\n\n\nclass GameView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            letters: [],\n            currentAnswer: [],\n            isSubmitVisible: false,\n            dragActive: this.getDragActive(),\n        };\n        this.handleResize = this.handleResize.bind(this);\n        this.debouncedResizeListener = debounce(this.handleResize, 50);\n    }\n\n    componentDidMount() {\n        const { allWords, dispatch } = this.props;\n\n        if (allWords.length) {\n            dispatch(initWords(allWords));\n        }\n\n        window.addEventListener('resize', this.debouncedResizeListener);\n    }\n\n    componentDidUpdate(prevProps) {\n        const { allWords, words, dispatch } = this.props;\n\n        if (allWords !== prevProps.allWords) {\n            dispatch(initWords(allWords));\n        }\n\n        if (words !== prevProps.words && words.length) {\n            this.initLetters(words);\n        }\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.debouncedResizeListener);\n    }\n\n    getDragActive = () => !isScreenSmall();\n\n    handleResize = () => {\n        const { letters, currentAnswer, dragActive } = this.state;\n        const dragActiveOnResizeEnd = this.getDragActive();\n\n        if (dragActiveOnResizeEnd === dragActive) {\n            return;\n        }\n\n        let newState = {\n            dragActive: dragActiveOnResizeEnd,\n        };\n\n        if (dragActiveOnResizeEnd) {\n            const lettersOutsideSlots = letters\n                .filter((letter) => letter.active);\n\n            const currentAnswerOnDesktop = currentAnswer\n                .concat(lettersOutsideSlots);\n\n            newState = {\n                ...newState,\n                letters: this.setAllLettersActiveState(currentAnswerOnDesktop, true),\n                currentAnswer: [...currentAnswerOnDesktop],\n                isSubmitVisible: false,\n            };\n        } else {\n            newState = {\n                ...newState,\n                letters: this.setAllLettersActiveState(letters, false),\n                currentAnswer: [...letters],\n                isSubmitVisible: true,\n            };\n        }\n        this.setState(newState);\n    };\n\n    initLetters = (words) => {\n        const lettersObjects = words[0].split('')\n            .map((letter) => ({\n                value: letter,\n                id: generateID(),\n                active: true,\n            }));\n        /* eslint-disable react/no-did-update-set-state */\n        this.setState({\n            letters: shuffleArray(lettersObjects),\n        }, this.initCurrentAnswer);\n    };\n\n    initCurrentAnswer = () => {\n        if (isScreenSmall()) {\n            return;\n        }\n        const { letters } = this.state;\n\n        this.setState({\n            currentAnswer: [...letters],\n        });\n    };\n\n    toggleLettersActiveState = (id) => {\n        const { letters } = this.state;\n\n        const index = letters.findIndex((el) => el.id === id);\n        letters[index].active = !letters[index].active;\n        this.setState({\n            letters,\n        });\n    };\n\n    setAllLettersActiveState = (letters, isActive) => {\n        const updatedLetters = letters;\n        updatedLetters.forEach((letter, index) => {\n            updatedLetters[index].active = isActive;\n        });\n        return updatedLetters;\n    };\n\n    handleLetterClick = (id) => {\n        if (!isScreenSmall()) {\n            return;\n        }\n\n        const { letters, currentAnswer } = this.state;\n        const letterSelected = letters\n            .find((el) => el.id === id);\n\n        this.toggleLettersActiveState(id);\n        const updatedCurrentAnswer = [...currentAnswer, letterSelected];\n\n        this.setState({\n            currentAnswer: updatedCurrentAnswer,\n        }, () => {\n            if (updatedCurrentAnswer.length === WORD_LENGTH) {\n                this.setState({\n                    isSubmitVisible: true,\n                });\n            }\n        });\n    };\n\n    handleDragEnd = (result) => {\n        const { source, destination, draggableId } = result;\n        const { letters } = this.state;\n\n        if (!destination || destination.index === source.index) {\n            return;\n        }\n\n        const movedLetter = letters[source.index];\n        const updatedLetters = letters\n            .filter((letter) => letter.id !== draggableId);\n        updatedLetters.splice(destination.index, 0, movedLetter);\n\n        this.setState({\n            letters: updatedLetters,\n            currentAnswer: [...updatedLetters],\n        });\n    };\n\n    handleBackspaceClick = () => {\n        const { currentAnswer } = this.state;\n        const lastLetterID = currentAnswer[currentAnswer.length - 1].id;\n\n        this.toggleLettersActiveState(lastLetterID);\n        currentAnswer.pop();\n\n        this.setState({\n            currentAnswer: [...currentAnswer],\n        });\n    };\n\n    submit = () => {\n        const { currentAnswer } = this.state;\n        const { dispatch, history } = this.props;\n\n        dispatch(submitAnswer(\n            currentAnswer.length === WORD_LENGTH\n                ? this.joinLetters(currentAnswer)\n                : '',\n        ));\n        history.replace('/result');\n    };\n\n    onSubmit = () => {\n        this.submit();\n    };\n\n    onCancel = () => {\n        this.setState({\n            isSubmitVisible: false,\n        });\n    };\n\n    timeIsOver = () => {\n        this.submit();\n    };\n\n    joinLetters = (arr) => arr.reduce((a, b) => a + b.value, '');\n\n    render() {\n        const { loading, error } = this.props;\n        const {\n            letters,\n            currentAnswer,\n            isSubmitVisible,\n            dragActive,\n        } = this.state;\n\n        const gameClasses = loading || error\n            ? classNames(\n                classes.Game,\n                classes.Empty,\n            )\n            : classes.Game;\n\n        if (loading) {\n            return (\n                <main className={gameClasses}>\n                    <div className={classes.Loader}>Loading&hellip;</div>\n                </main>\n            );\n        }\n\n        if (error) {\n            return (\n                <main className={gameClasses}>\n                    Wystąpił błąd\n                </main>\n            );\n        }\n\n        return (\n            <main className={classes.Game}>\n                <Timer timeIsOver={this.timeIsOver} />\n                <Slots\n                    currentAnswer={currentAnswer}\n                />\n                <Backspace\n                    clicked={this.handleBackspaceClick}\n                    disabled={currentAnswer.length === 0 || isSubmitVisible}\n                />\n                {\n                    !isSubmitVisible\n                        ? (\n                            <Letters\n                                letters={letters}\n                                clicked={this.handleLetterClick}\n                                dragActive={dragActive}\n                                dragEnd={this.handleDragEnd}\n                            />\n                        )\n                        : (\n                            <Submit\n                                onSubmit={this.onSubmit}\n                                onCancel={this.onCancel}\n                                showCancel={!dragActive}\n                            />\n                        )\n                }\n                {\n                    dragActive\n                        ? (\n                            <Submit\n                                onSubmit={this.onSubmit}\n                                onCancel={this.onCancel}\n                                showCancel={!dragActive}\n                            />\n                        )\n                        : null\n                }\n            </main>\n        );\n    }\n}\n\nGameView.propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    allWords: PropTypes.array.isRequired,\n    loading: PropTypes.bool.isRequired,\n    error: PropTypes.object,\n    words: PropTypes.array.isRequired,\n    history: PropTypes.object.isRequired,\n};\n\nGameView.defaultProps = {\n    error: null,\n};\n\nconst mapStateToProps = ({ allWords: { data: allWords, loading, error }, words }) => (\n    { allWords, loading, error, words }\n);\n\nconst Game = connect(mapStateToProps)(GameView);\nexport { Game };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './Answer.scss';\n\nconst Answer = ({ answer }) => (\n    <div className={classes.AnswerSection}>\n        <h2 className={classes.AnswerHeader}>\n            {answer ? 'Twoje słowo:' : 'Nie ułożyłaś/eś słowa'}\n        </h2>\n        {\n            answer\n                ? (\n                    <div className={classes.Answer}>\n                        {answer}\n                    </div>\n                )\n                : null\n        }\n    </div>\n);\n\nAnswer.propTypes = {\n    answer: PropTypes.string.isRequired,\n};\n\nexport { Answer };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nimport classes from './ResultMessage.scss';\n\nconst ResultMessage = ({ isAnswerCorrect }) => (\n    <div className={classes.MessageSection}>\n        {\n            isAnswerCorrect\n                ? (\n                    <h3 className={classes.MessageHeader}>\n                        <i className={classNames('fas fa-check fa-3x', classes.MessageIcon)} />\n                        Gratulacje, jest to poprawna odpowiedź!\n                    </h3>\n                )\n                : (\n                    <h2 className={classes.MessageHeader}>\n                        <i className={classNames('fas fa-times fa-3x', classes.MessageIcon)} />\n                        Nie udało się, może następnym razem\n                    </h2>\n                )\n        }\n    </div>\n);\n\nResultMessage.propTypes = {\n    isAnswerCorrect: PropTypes.bool.isRequired,\n};\n\nexport { ResultMessage };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classes from './OtherWords.scss';\n\nconst OtherWords = ({ isAnswerCorrect, otherWords }) => {\n    const otherWordsItems = otherWords\n        .map((word) => (\n            <li className={classes.WordListItem} key={word}>\n                {word.toUpperCase()}\n            </li>\n        ));\n\n    const singularOrPluralForm = otherWords.length > 1 ? 'słowa' : 'słowo';\n\n    return (\n        <div className={classes.OtherSection}>\n            {\n                !otherWords.length\n                    ? <h4 className={classes.OtherHeader}>Słowo nie ma anagramów</h4>\n                    : (\n                        <>\n                            <h2 className={classes.OtherHeader}>\n                                {isAnswerCorrect\n                                    ? `Inne możliwe ${singularOrPluralForm}:`\n                                    : `Poprawne ${singularOrPluralForm} to:`}\n                            </h2>\n                            <ul className={classes.WordList}>\n                                {otherWordsItems}\n                            </ul>\n                        </>\n                    )\n            }\n        </div>\n    );\n};\n\nOtherWords.propTypes = {\n    isAnswerCorrect: PropTypes.bool.isRequired,\n    otherWords: PropTypes.array.isRequired,\n};\n\nexport { OtherWords };\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport classes from './PlayAgain.scss';\n\nconst PlayAgain = () => (\n    <div className={classes.PlayAgainSection}>\n        <Link\n            to=\"/game\"\n            replace\n            className={classes.PlayAgainBtn}\n            type=\"button\"\n        >\n            Zagraj ponownie\n        </Link>\n    </div>\n);\n\nexport { PlayAgain };\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport classes from './Result.scss';\nimport { submitAnswer } from '../../store/actions/submit-answer';\nimport { Answer } from './Answer/Answer';\nimport { ResultMessage } from './ResultMessage/ResultMessage';\nimport { OtherWords } from './OtherWords/OtherWords';\nimport { PlayAgain } from './PlayAgain/PlayAgain';\n\nclass ResultView extends Component {\n    componentWillUnmount() {\n        const { dispatch } = this.props;\n        dispatch(submitAnswer(null));\n    }\n\n    isAnswerCorrect = () => {\n        const { words, answer } = this.props;\n        return words.includes(answer);\n    };\n\n    render() {\n        const { words, answer } = this.props;\n        const otherWords = words.filter((word) => word !== answer);\n\n        if (answer === null) {\n            return <Redirect to=\"/\" />;\n        }\n\n        return (\n            <main className={classes.Result}>\n                <Answer answer={answer.toUpperCase()} />\n                <ResultMessage isAnswerCorrect={this.isAnswerCorrect()} />\n                <OtherWords\n                    isAnswerCorrect={this.isAnswerCorrect()}\n                    otherWords={otherWords}\n                />\n                <PlayAgain />\n            </main>\n        );\n    }\n}\n\nResultView.propTypes = {\n    words: PropTypes.array.isRequired,\n    answer: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n};\n\nResultView.defaultProps = {\n    answer: null,\n};\n\nconst mapStateToProps = ({ words, answer }) => ({ words, answer });\n\nconst Result = connect(mapStateToProps)(ResultView);\nexport { Result };\n","import axios from 'axios';\n\nconst get = (url) => axios.get(url)\n    .then((res) => res.data);\n\nexport const httpService = {\n    get,\n};\n","import { httpService } from './http-service';\n\nconst urls = {\n    allWords: 'words.json',\n};\n\nconst getAllWords = () => httpService.get(urls.allWords);\n\nexport const WordsService = {\n    getAllWords,\n};\n","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nimport { Header } from './components/Header/Header';\nimport { Home } from './components/Home/Home';\nimport { Game } from './components/Game/Game';\nimport { Result } from './components/Result/Result';\n\nimport { loadAllWords } from './store/actions/load-all-words';\n\nexport class AppView extends Component {\n    componentDidMount() {\n        const { dispatch } = this.props;\n        dispatch(loadAllWords());\n    }\n\n    render() {\n        return (\n            <BrowserRouter basename={process.env.PUBLIC_URL}>\n                <div>\n                    <Header />\n                    <Route exact path=\"/\" component={Home} />\n                    <Route exact path=\"/game\" component={Game} />\n                    <Route exact path=\"/result\" component={Result} />\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nAppView.propTypes = {\n    dispatch: PropTypes.func,\n};\n\nAppView.defaultProps = {\n    dispatch: () => {},\n};\n\nconst App = connect(null)(AppView);\nexport { App };\n","import { WordsService } from '../../service/get-all-words';\n\nexport const LOAD_ALL_WORDS_REQUEST = 'LOAD_ALL_WORDS_REQUEST';\nexport const LOAD_ALL_WORDS_SUCCESS = 'LOAD_ALL_WORDS_SUCCESS';\nexport const LOAD_ALL_WORDS_FAILURE = 'LOAD_ALL_WORDS_FAILURE';\n\n\nconst loadRequest = () => ({\n    type: LOAD_ALL_WORDS_REQUEST,\n});\n\nconst loadSuccess = (allWords) => ({\n    type: LOAD_ALL_WORDS_SUCCESS,\n    data: allWords,\n});\n\nconst loadFailure = (error) => ({\n    type: LOAD_ALL_WORDS_FAILURE,\n    error,\n});\n\nexport const loadAllWords = () => (dispatch) => {\n    dispatch(loadRequest());\n    return WordsService.getAllWords()\n        .then(\n            (allWords) => dispatch(loadSuccess(allWords)),\n            (error) => dispatch(loadFailure(error)),\n        );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { INIT_WORDS } from '../actions/init-words';\n\nconst initialState = [];\n\nconst wordsReducer = (state = initialState, { type, words }) => {\n    switch (type) {\n        case INIT_WORDS:\n            return words;\n        default: return state;\n    }\n};\n\nexport { wordsReducer };\n","import {\n    LOAD_ALL_WORDS_REQUEST,\n    LOAD_ALL_WORDS_SUCCESS,\n    LOAD_ALL_WORDS_FAILURE,\n} from '../actions/load-all-words';\n\nconst initialState = {\n    data: [],\n    loading: false,\n    error: null,\n};\n\nconst allWordsReducer = (\n    state = initialState,\n    { type, data: allWords, error },\n) => {\n    switch (type) {\n        case LOAD_ALL_WORDS_REQUEST:\n            return {\n                ...state,\n                loading: true,\n            };\n        case LOAD_ALL_WORDS_SUCCESS:\n            return {\n                ...state,\n                loading: false,\n                error: null,\n                data: allWords,\n            };\n        case LOAD_ALL_WORDS_FAILURE:\n            return {\n                ...state,\n                loading: false,\n                error,\n                data: [],\n            };\n        default: return state;\n    }\n};\n\nexport { allWordsReducer };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport 'normalize-css/normalize.css';\nimport '@fortawesome/fontawesome-free/scss/fontawesome.scss';\nimport '@fortawesome/fontawesome-free/scss/solid.scss';\n\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { wordsReducer } from './store/reducers/words';\nimport { answerReducer } from './store/reducers/answer';\nimport { allWordsReducer } from './store/reducers/all-words';\n\nconst rootReducer = combineReducers({\n    allWords: allWordsReducer,\n    words: wordsReducer,\n    answer: answerReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(thunk)),\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { SUBMIT_ANSWER } from '../actions/submit-answer';\n\nconst initialState = null;\n\nconst answerReducer = (state = initialState, { type, answer }) => {\n    switch (type) {\n        case SUBMIT_ANSWER:\n            return answer;\n        default: return state;\n    }\n};\n\nexport { answerReducer };\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Game\":\"Game__Game__xvUCX\",\"Empty\":\"Game__Empty__2meEP\",\"Loader\":\"Game__Loader__srtKB\",\"load\":\"Game__load__fLGti\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SlotsSection\":\"Slots__SlotsSection__3yFud\",\"Slots\":\"Slots__Slots__37-My\",\"Slot\":\"Slots__Slot__2KBwb\",\"Empty\":\"Slots__Empty__2UuSX\",\"SlotLetter\":\"Slots__SlotLetter__3XQPm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MessageSection\":\"ResultMessage__MessageSection__1Aq-D\",\"MessageIcon\":\"ResultMessage__MessageIcon__2MrXu\",\"MessageHeader\":\"ResultMessage__MessageHeader__1R9wU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"OtherSection\":\"OtherWords__OtherSection__32KdO\",\"OtherHeader\":\"OtherWords__OtherHeader__1VlGe\",\"WordList\":\"OtherWords__WordList__1RqyB\",\"WordListItem\":\"OtherWords__WordListItem__qaidZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Home\":\"Home__Home__hMHTH\",\"Hero\":\"Home__Hero__1qk5I\",\"StartGame\":\"Home__StartGame__39d5A\",\"StartGameAction\":\"Home__StartGameAction__3rSNF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Letters\":\"Letters__Letters__2F_th\",\"LettersContainer\":\"Letters__LettersContainer__R5vr9\",\"DraggingOver\":\"Letters__DraggingOver__2vakM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Letter\":\"Letter__Letter__1liXh\",\"Letter-1\":\"Letter__Letter-1__1nzbv\",\"Letter-2\":\"Letter__Letter-2__-Frrh\",\"Letter-3\":\"Letter__Letter-3__1W4AF\",\"Letter-4\":\"Letter__Letter-4__1wDI3\",\"Letter-5\":\"Letter__Letter-5__3bqUn\",\"Letter-6\":\"Letter__Letter-6__1TiOg\",\"Letter-7\":\"Letter__Letter-7__1Y5t_\",\"LetterButton\":\"Letter__LetterButton__28uiz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Submit\":\"Submit__Submit__2tvrk\",\"Button\":\"Submit__Button__3zAbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AnswerSection\":\"Answer__AnswerSection__w0wsp\",\"AnswerHeader\":\"Answer__AnswerHeader__1Lf6s\",\"Answer\":\"Answer__Answer__1hAC1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header__Header__1_1R8\",\"HeaderLink\":\"Header__HeaderLink__ClY9q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PlayAgainSection\":\"PlayAgain__PlayAgainSection__2e0KN\",\"PlayAgainBtn\":\"PlayAgain__PlayAgainBtn__1zcw0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BackspaceBtn\":\"Backspace__BackspaceBtn__3fj68\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Timer\":\"Timer__Timer__18W2m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Result\":\"Result__Result__3Lmz1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fa-spin\":\"index__fa-spin__2FcI0\"};"],"sourceRoot":""}